name: build-and-test
on: [push]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: eot_test
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 6379:6379
      php:
        image: php:7.2.34-zts-alpine3.12
        env:
          php-version: '7.2.34'
          extensions: mbstring, xml, ctype, iconv, intl, mysql, redis, soap, zip, pdo_mysql
          tools: composer:v1, pecl
          ini-set: "extension=mcrypt.so"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup Python
        uses: actions/setup-python@master
        with:
          python-version: 3.8

      - name: Install mcrypt
        run: php -v

      - name: Start mysql service
        run: sudo /etc/init.d/mysql start

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: |
          composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
      - name: Get node cache directory
        id: node-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.node-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install node dependencies
        run: |
          yarn install
          yarn encore production
    
